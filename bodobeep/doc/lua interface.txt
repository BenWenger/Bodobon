Global variables provided by Editor:
    bodo                (general table with info in it)
        bodo.host       (all the user data from the host file)
        bodo.curSong    (the user data for the current song being interacted with)
        bodo.channels   (table of all chan objects -- keyed by the chan name)
        .songs._chanData    (table of user data for each channel of the song)
        
    In the registry:
        .channels       (all channels duplicate of bodo.channels for GC purposes)
        .chanUser       (table, keyed by chan name.  Each value is a table of user data to be accessed/modified by the Lua)
        .songs          (table of user data for all loaded songs -- arbitrary integer key)
        
    channelObject.data   how to access .chanUser from the registry from the Lua
    channelObject.name   access the channel name
        

Channels:
    Each ChanObj will have a series of functions that can be called to configure their audio output.
    The functions available will depend on the channel.
    
    Additionally, each channel will have a 'data' table (which the Editor will redirect to _bodo_private.chanUser for
        the channel) that the user can set runtime info for playback.
        
    The channel also has a 'name' property which will return its name

        
Stuff provided by the Lua:
    bodo_driver()
        Should return a table (or BE a table, it doesn't have to be a function) indicating what audio driver to use,
        and what channels to use.  In below form:
            {
                ["system"]={"nes"},
                ["channels"]={"pulse1", "pulse2", "triangle"}
            }
        
    bodo_init()         [optional]
        Called after the audio driver and everything has been set up, to let the Lua set up its own stuff
        
        
    bodo_getLength(tone, channel, song)     [optional]
        Called intermittently.  Given a tone/channel/song, should return the length of that tone in updates
        
        This function is optional if tones have a 'length' property.  If this function does not exist, the value of the
        'length' property is used'
        
    bodo_playStartSong(song)    [optional]
        Called when the user is about to start audio playback.  bodo.curSong will be set to the song being played
        
    bodo_playStartTone(tone, channel)
        Called when a tone is to be played.
        
    bodo_playUpdateTone(tone, channel)
        Called every frame after until the end of the tone
        
        
    bodo_getPitchRange(channel, song)
        Called ~once for each channel when a song is loaded.  Returns an integer (greater than zero) indicating the number
        of "pitch rows" available in the editor.  Other return values might include "rest" or "sustain".  Example:
        
            bodo_getPitchRange = function(channel, song)
                return 12*4, "rest"
            end
            
    bodo_getPitchPos(tone, channel, song) [optional]
        Called intermittently.  Given a tone/channel/song, should return which "pitch row" (zero indexed) the tone should
            appear on.  Zero is the bottom row, with higher values being drawn higher.  May also return "rest" or "sustain" if
            the tone should be drawn as them instead.
            
        This function is optional if tones have a 'pitch' property.  If this function does not exist, the value of the 'pitch'
        property is used.
            
            
    bodo_setTonePitch(pitchPos, tone, channel, song)  [optional]
        Called intermittently.  This function is expected to modify 'tone' to apply the given pitchPos.  It should return 'tone'
        (as a table).  The tone may be a numerical value >= 0 (indicating its pitch row), or it may be the string "rest" or
        "sustain" if those values were explicitly allowed by bodo_getPitchRange.
        
        This function is optional if tones have a 'pitch' property.  If this function does not exist, the value is assigned
        to the 'pitch' of the tone.
        
    bodo_getToneEditDetails(channel, song)
        Called for each channel once a song is loaded.  Must return a table of all properties for a tone that can be edited
        by the editor, as well as legal values for those properties.
        
        The key in the table is the property name, and the value is an array containing exactly 2 elements:
            - String:  the type of the field (can be "int", "float" or "string")
            - Table:   legal values for this field
            
        The legal value table must be an array with exactly 2 or 3 elements:
        
        TODO WORK THIS OUT